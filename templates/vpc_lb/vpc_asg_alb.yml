Description: This template deploys a VPC with a pair of public and private subnets,
    spread across two Availability Zones, with optionally configurable IP ranges.
    It deploys an internet gateway, with a default route on the public subnets.
    It deploys a pair of NAT gateways (one in each AZ), and default routes for them in the private subnets.
    It deploys a bastion host with an Elastic IP, with security groups allowing external SSH from a specified IP host or subnet, using a provided public key, and without exposing private keys.
    It deploys an Autoscaling group over both AZs' private subnet using a LaunchConfiguration, and these instances can be accessed via the bastion host.
    It deploys a load balancer that routes requests to the instances in the Autoscaling group.
    It provides several outputs including a URL that can be used to access the web application and the command to be used for remote management access.


AWSTemplateFormatVersion: "2010-09-09"


Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        Default: Udagram

    VpcCIDR: 
        Description: The IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.0.0.0/16

    PublicSubnet1CIDR:
        Description: The IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.0.0/24

    PublicSubnet2CIDR:
        Description: The IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.1.0/24

    PrivateSubnet1CIDR:
        Description: The IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.0.2.0/24
 
    PrivateSubnet2CIDR:
        Description: The IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        Default: 10.0.3.0/24

    DeveloperIP:
        Description: The IP range (CIDR notation) or IP/32 for single IP, for the hosts allowed SSH access
        Type: String
        Default: 127.0.0.1/32

    PublicKey:
        Description: Existing public key that will allow private key holder SSH access to instances.
        Type: String
        Default: ""

    BastionInstanceImageID:
        Description: The AWS AMI ID to use for the JumpBox. Ubuntu base required.
        Type: String
        Default: "ami-003634241a8fcdec0"

    AppServerInstanceImageID:
        Description: The AWS AMI ID to use for the App Server. Ubuntu base required.
        Type: String
        Default: "ami-003634241a8fcdec0"

    BastionInstanceType:
        Description: The instance type to use for the JumpBox.
        Type: String
        Default: t3a.nano

    AppServerInstanceType:
        Description: The instance type to use for the App Server. At least 4GB RAM & 2vCPU required.
        Type: String
        Default: t3a.medium


Resources:
    VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags: 
                - Key: Name 
                  Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc
            Tags:
                - Key: Name
                  Value: NAT Gateway 1

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
          Domain: vpc
          Tags:
              - Key: Name
                Value: NAT Gateway 2

    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref VPC
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

    PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    BastionInstance:
        Type: AWS::EC2::Instance
        Properties: 
            ImageId: !Ref BastionInstanceImageID
            InstanceType: !Ref BastionInstanceType
            SubnetId: !Ref PublicSubnet2
            SecurityGroupIds: [!Ref BastionSecurityGroup]
            UserData:
                Fn::Base64:
                    !Sub |
                      #!/bin/bash -xe
                      mkdir -p /home/ubuntu/.ssh
                      echo ${PublicKey} >> /home/ubuntu/.ssh/authorized_keys2
                      chmod 700 /home/ubuntu/.ssh
                      chmod 600 /home/ubuntu/.ssh/authorized_keys2
                      chown -R ubuntu:ubuntu /home/ubuntu/.ssh
            Tags: 
                - Key: Name 
                  Value: SSHBastion

    BastionHostEIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc
            InstanceId: !Ref BastionInstance
            Tags: 
                - Key: Name 
                  Value: SSH Bastion

    BastionSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: SSH Bastion Security Group
            GroupName: SSHBastion
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: !Sub ${DeveloperIP}
            SecurityGroupEgress:
                - IpProtocol: -1
                  CidrIp: 0.0.0.0/0
            Tags: 
                - Key: Name 
                  Value: SSHBastion
            VpcId: !Ref VPC

    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Loab Balancer Security Group
            GroupName: Load Balancer
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
            Tags: 
                - Key: Name 
                  Value: Load Balancer
            VpcId: !Ref VPC

    AppServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: App Server Security Group
            GroupName: AppServer
            SecurityGroupEgress:
              - IpProtocol: -1
                CidrIp: 0.0.0.0/0
            Tags: 
                - Key: Name 
                  Value: AppServer
            VpcId: !Ref VPC

    SSHFromBastionIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
          GroupId: !Ref AppServerSecurityGroup
          Description: String
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref BastionSecurityGroup

    HTTPFromLoadBalancerIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
          GroupId: !Ref AppServerSecurityGroup
          Description: String
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

    HTTPToAppServerEgress:
        Type: AWS::EC2::SecurityGroupEgress
        Properties:
          GroupId: !Ref LoadBalancerSecurityGroup
          Description: String
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          DestinationSecurityGroupId: !Ref AppServerSecurityGroup

    AutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            AutoScalingGroupName: Udagram Autoscaling Group
            VPCZoneIdentifier: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
            LaunchConfigurationName: !Ref AppServerLaunchConfiguration
            MaxSize: 4
            MinSize: 4
            HealthCheckGracePeriod: 30
            HealthCheckType: ELB
            TargetGroupARNs:
             - !Ref WebAppTargetGroup
            Tags:
              - Key: Name
                Value: WebAppServer
                PropagateAtLaunch: true
            
    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties: 
            SecurityGroups: 
              - !Ref LoadBalancerSecurityGroup
            Subnets: 
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
            - Type: forward
              TargetGroupArn:
                Ref: WebAppTargetGroup
          LoadBalancerArn: !Ref LoadBalancer
          Port: '80'
          Protocol: HTTP

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            Port: '80'
            Protocol: 'HTTP'
            VpcId: !Ref VPC
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: /
            HealthCheckPort: 80
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2

    AppServerInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
             - !Ref S3ReadRole

    S3ReadRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    -
                        Effect: Allow
                        Principal:
                            Service: ec2.amazonaws.com
                        Action: sts:AssumeRole
            Path: /

    RolePolicies:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: S3ReadPolicy
            PolicyDocument:
                Version: "2012-10-17"
                Statement: 
                    - 
                        Effect: "Allow"
                        Action:
                            - 's3:Get*'
                            - 's3:List*'
                        Resource: "*"
            Roles:
                - !Ref S3ReadRole

    AppServerLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId: !Ref AppServerInstanceImageID
            SecurityGroups: [!Ref AppServerSecurityGroup]
            InstanceType: !Ref AppServerInstanceType
            BlockDeviceMappings:
                -
                    DeviceName: "/dev/sda1"
                    Ebs:
                        VolumeSize: 10
                        VolumeType: gp2
            IamInstanceProfile: !Ref AppServerInstanceProfile
            InstanceType: !Ref AppServerInstanceType
            UserData:
              Fn::Base64:
                !Sub |
                  #!/bin/bash -xe
                  mkdir -p /home/ubuntu/.ssh
                  echo ${PublicKey} >> /home/ubuntu/.ssh/authorized_keys2
                  chmod 700 /home/ubuntu/.ssh
                  chmod 600 /home/ubuntu/.ssh/authorized_keys2
                  chown -R ubuntu:ubuntu /home/ubuntu/.ssh
                  apt-get update -y
                  apt-get install unzip awscli -y
                  apt-get install apache2 -y
                  systemctl enable apache2.service
                  systemctl start apache2.service
                  cd /var/www/html
                  aws s3 cp s3://udacity-demo-1/udacity.zip .
                  unzip -o udacity.zip


Outputs:
    DeveloperIP:
        Description: External IP range allowed to SSH into the JumpBox
        Value: !Sub ${DeveloperIP}

    BastionHostEIP:
        Description: Elastic IP for the JumpBox
        Value: !Sub ${BastionHostEIP}

    RemoteAccessCMD:
        Description: JumpBox SSH command (ensure locally SSH Agent is running and run `ssh-add` to add your key before connecting)
        Value: !Sub ssh -A -l ubuntu ${BastionHostEIP}

    ApplicationURL:
        Description: Application Endpoint URL
        Value: !Sub http://${LoadBalancer.DNSName}